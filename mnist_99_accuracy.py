# -*- coding: utf-8 -*-
"""MNIST_99_accuracy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUelnAcToQb9v155b5JMZ_ijKlGrtn3Y
"""

# https://keras.io/
!pip install -q keras
import keras

import numpy as np

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Add
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers


from keras.datasets import mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

print (X_train.shape)
from matplotlib import pyplot 


X_train = X_train.reshape(X_train.shape[0], 28, 28,1)
X_test = X_test.reshape(X_test.shape[0], 28, 28,1)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
shift = 0.2
datagen = ImageDataGenerator(zca_whitening= True)
datagen.fit(X_train)

for X_batch in datagen.flow(X_train, batch_size= 9, shuffle= True):
	# create a grid of 3x3 images
	for i in range(0, 9 ):
		pyplot.subplot(330 + 1 + i)
		pyplot.imshow(X_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))
	# show the plot
	pyplot.show()
	break

X_train1 = datagen.flow(X_train, shuffle = True)  

print(X_train.shape)
# X_train /= 255
# X_test /= 255

Y_train = np_utils.to_categorical(y_train, 10)
Y_test = np_utils.to_categorical(y_test, 10)

from keras.layers import Activation
model = Sequential()

 
model.add(Convolution2D(196, 3, 3, activation='relu', input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Convolution2D(26, 1, activation='relu'))
model.add(Dropout(0.25))
model.add(Convolution2D(10, 13))
model.add(Flatten())
model.add(Activation('softmax'))
model.summary()
model.compile(loss='binary_crossentropy',
              optimizer=optimizers.SGD(lr=1e-3, momentum=0.9),
              metrics=['accuracy'])

model.fit(X_train, Y_train, batch_size=25, nb_epoch=100, verbose=1)
score = model.evaluate(X_test, Y_test, verbose=0)
print(score)

score = model.evaluate(X_test, Y_test, verbose=0)
print(score)

import os
os.chdir('..')

from keras.models import load_model
model.save('MNIST_9976.h5')
!ls

!pwd
!ls

from google.colab import files
files.download('MNIST_9976.h5')